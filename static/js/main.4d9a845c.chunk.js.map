{"version":3,"sources":["domain/range.js","App.js","domain/weekdayCounter.js","dataSource/herokuHolidayDataSource.js","index.js"],"names":["Range","start","end","this","App","props","state","range","startDate","Date","endDate","key","count","update","a","counter","countWeekdayInRange","setState","className","locale","locales","editableDateInputs","onChange","item","moveRangeOnFirstSelection","ranges","dateDisplayFormat","data-testid","React","Component","monthsInRange","endMonth","startOfMonth","addMonths","currentMonth","isBefore","countAllNonWeekendIn","nextEndDate","addDays","differenceInBusinessDays","countWeekdayHolidaysIn","dataSource","months","Array","from","Promise","all","map","getHolidaysIn","holidaysInRange","flat","filter","date","isWithinInterval","isWeekend","length","nonWeekendCount","holidaysCount","WeekdayCounter","holidayDataSource","readDate","dateString","year","parseInt","substr","month","day","params","format","apiUrl","axios","get","dates","data","ReactDOM","render","StrictMode","HerokuHolidayDataSource","document","getElementById"],"mappings":"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","file":"static/js/main.4d9a845c.chunk.js","sourcesContent":["export default class Range {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}","import React from 'react';\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\nimport * as locales from 'react-date-range/dist/locale';\nimport { DateRange } from 'react-date-range';\nimport Range from './domain/range';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = props.counter;\n  }\n\n  state = {\n    range: {\n      startDate: new Date(),\n      endDate: new Date(),\n      key: 'range'\n    },\n    count: 0\n  }\n\n  update = async ({ range }) => {\n    const { startDate, endDate } = range;\n    const count = await this.counter.countWeekdayInRange(new Range(startDate, endDate));\n    this.setState({range, count});\n  }\n\n  render() {\n    const { count, range } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>날짜 수 세기</h1>\n        <DateRange\n          locale={locales['ko']}\n          editableDateInputs={true}\n          onChange={item => this.update(item)}\n          moveRangeOnFirstSelection={false}\n          ranges={[range]}\n          dateDisplayFormat={'yyyy/MM/dd'}\n        />\n        <p data-testid='result'>{count} 일</p>\n      </div>\n    );\n  }\n}\n\nexport default App;","import { differenceInBusinessDays, addDays, isWithinInterval, startOfMonth, addMonths, isBefore, isWeekend } from 'date-fns';\n\nfunction* monthsInRange(range) {\n    const {start, end} = range;\n    const endMonth = startOfMonth(addMonths(end, 1));\n\n    let currentMonth = startOfMonth(start);\n\n    while(isBefore(currentMonth, endMonth)) {\n        yield currentMonth;\n        currentMonth = addMonths(currentMonth, 1);\n    }\n}\n\nfunction countAllNonWeekendIn(range) {\n    const {start, end} = range;\n    const nextEndDate = addDays(end, 1);\n    return differenceInBusinessDays(nextEndDate, start);\n}\n\nasync function countWeekdayHolidaysIn(dataSource, range) {\n    const months = Array.from(monthsInRange(range));\n    const holidaysInRange = (await Promise.all(months.map(dataSource.getHolidaysIn)))\n        .flat()\n        .filter(date => isWithinInterval(date, range))\n        .filter(date => !isWeekend(date));\n    \n    return holidaysInRange.length;\n}\n\nasync function countWeekdayInRange(dataSource, range) {\n    const nonWeekendCount = countAllNonWeekendIn(range);\n    const holidaysCount = await countWeekdayHolidaysIn(dataSource, range);\n\n    return nonWeekendCount - holidaysCount;\n}\n\nexport default class WeekdayCounter {\n    constructor(holidayDataSource) {\n        this.holidayDataSource = holidayDataSource;\n    }\n\n    countWeekdayInRange(range) {\n        return countWeekdayInRange(this.holidayDataSource, range);\n    }\n}","import axios from 'axios';\nimport { format } from 'date-fns';\n\nfunction readDate(dateString) {\n    const year = parseInt(dateString.substr(0, 4));\n    const month = parseInt(dateString.substr(4, 2));\n    const day = parseInt(dateString.substr(6, 2));\n    \n    return new Date(year, month - 1, day);\n}\n\nasync function getHolidaysIn(month) {\n    const params = {\n        year: format(month, 'yyyy'),\n        month: format(month, 'MM')\n    };\n    const apiUrl = `https://shielded-forest-67184.herokuapp.com/holidays?year=${params.year}&month=${params.month}`;\n    const { data: { dates } } = await axios.get(apiUrl);\n    return dates.map(readDate);\n}\n\nexport {\n    getHolidaysIn\n}","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\nimport WeekdayCounter from './domain/weekdayCounter';\nimport * as HerokuHolidayDataSource from './dataSource/herokuHolidayDataSource';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App \n        counter={new WeekdayCounter(HerokuHolidayDataSource)}\n      />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}