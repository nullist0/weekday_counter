{"version":3,"sources":["domain/range.js","components/DateRangePicker.js","components/CountResult.js","App.js","domain/weekdayCounter.js","dataSource/month.js","dataSource/herokuHolidayDataSource.js","index.js"],"names":["Range","start","end","this","DateRangePicker","onChangeRange","useState","startDate","Date","endDate","key","dateRange","setRange","locale","locales","editableDateInputs","onChange","item","range","handleChangeDateRange","ranges","dateDisplayFormat","CountResult","count","data-testid","App","counter","setCount","className","countWeekdayInRange","then","countAllNonWeekendIn","nextEndDate","addDays","differenceInBusinessDays","dataSource","a","nonWeekendCount","getHolidaysInRange","holidaysInRange","holidaysCount","length","WeekdayCounter","holidayDataSource","Month","date","year","getFullYear","month","getMonth","toString","padStart","monthsInRange","readDate","dateString","parseInt","substr","day","cache","getHolidaysInMonth","apiUrl","undefined","axios","get","dates","data","holidays","map","endMonth","startOfMonth","addMonths","currentMonth","isBefore","months","Array","from","Promise","all","flat","filter","isWithinInterval","isWeekend","ReactDOM","render","StrictMode","HerokuHolidayDataSource","document","getElementById"],"mappings":"mQAAqBA,EACjB,WAAYC,EAAOC,GAAM,oBACrBC,KAAKF,MAAQA,EACbE,KAAKD,IAAMA,G,sBCKZ,SAASE,EAAT,GAA6C,IAAlBC,EAAiB,EAAjBA,cAChC,EAA8BC,mBAAS,CACrCC,UAAW,IAAIC,KACfC,QAAS,IAAID,KACbE,IAAK,cAHP,mBAAOC,EAAP,KAAkBC,EAAlB,KAYA,OACE,cAAC,YAAD,CACEC,OAAQC,KACRC,oBAAoB,EACpBC,SAAU,SAAAC,GAAI,OAXY,SAAC,GAAmB,IAAjBN,EAAgB,EAAhBA,UACzBO,EAAQ,IAAIlB,EAAMW,EAAUJ,UAAWI,EAAUF,SAEvDG,EAASD,GACTN,EAAca,GAOMC,CAAsBF,IACxCG,OAAQ,CAACT,GACTU,kBAAmB,eCzBlB,SAASC,EAAT,GAAiC,IAAVC,EAAS,EAATA,MAC5B,OACE,oBAAGC,cAAY,SAAf,UAAyBD,EAAzB,aCmBWE,MAnBf,YAA2B,IAAZC,EAAW,EAAXA,QACb,EAA0BpB,mBAAS,GAAnC,mBAAOiB,EAAP,KAAcI,EAAd,KAKA,OACE,sBAAKC,UAAU,MAAf,UACE,kEACA,cAACxB,EAAD,CACEC,cARoB,SAACa,GACzBQ,EAAQG,oBAAoBX,GAAOY,KAAKH,MAStC,cAACL,EAAD,CACEC,MAAOA,Q,iDCff,SAASQ,EAAqBb,GAC1B,IAAOjB,EAAciB,EAAdjB,MAAOC,EAAOgB,EAAPhB,IACR8B,EAAcC,YAAQ/B,EAAK,GAEjC,OAAOgC,YAAyBF,EAAa/B,G,4CAGjD,WAAmCkC,EAAYjB,GAA/C,mBAAAkB,EAAA,6DACUC,EAAkBN,EAAqBb,GADjD,SAEkCiB,EAAWG,mBAAmBpB,GAFhE,cAEUqB,EAFV,OAGUC,EAAgBD,EAAgBE,OAH1C,kBAKWJ,EAAkBG,GAL7B,4C,0BAQqBE,E,WACjB,WAAYC,GAAoB,oBAC5BxC,KAAKwC,kBAAoBA,E,uDAG7B,SAAoBzB,GAChB,O,6CAAOW,CAAoB1B,KAAKwC,kBAAmBzB,O,8DCvBtC0B,E,WACjB,WAAYC,GAAO,oBACf,IAAMC,EAAOD,EAAKE,cACZC,EAAQH,EAAKI,WAAa,EAEhC9C,KAAK2C,KAAOA,EAAKI,WACjB/C,KAAK6C,MAAQA,EAAME,WAAWC,SAAS,EAAG,K,4CAG9C,WACI,OAAOhD,KAAK2C,KAAO3C,KAAK6C,U,gBCoBtBI,GAtBV,SAASC,EAASC,GACd,IAAMR,EAAOS,SAASD,EAAWE,OAAO,EAAG,IACrCR,EAAQO,SAASD,EAAWE,OAAO,EAAG,IACtCC,EAAMF,SAASD,EAAWE,OAAO,EAAG,IAE1C,OAAO,IAAIhD,KAAKsC,EAAME,EAAQ,EAAGS,GAGrC,IAAMC,EAAQ,G,SAECC,E,8EAAf,uCAAAvB,EAAA,yDAAoCU,EAApC,EAAoCA,KAAME,EAA1C,EAA0CA,MAChCY,EADV,oEACgFd,EADhF,kBAC8FE,QAEpEa,IAAlBH,EAAME,GAHd,gCAI0CE,IAAMC,IAAIH,GAJpD,gBAIwBI,EAJxB,EAIgBC,KAAQD,MACVE,EAAWF,EAAMG,IAAId,GAE3BK,EAAME,GAAUM,EAPxB,gCASWR,EAAME,IATjB,6C,sBAYA,SAAUR,EAAclC,GAAxB,6EACWjB,EAAciB,EAAdjB,MAAOC,EAAOgB,EAAPhB,IACRkE,EAAWC,YAAaC,YAAUpE,EAAK,IACzCqE,EAAeF,YAAapE,GAHpC,WAKUuE,YAASD,EAAcH,GALjC,gBAMQ,OANR,SAMc,IAAIxB,EAAM2B,GANxB,OAOQA,EAAeD,YAAUC,EAAc,GAP/C,sD,SAWejC,E,8EAAf,WAAkCpB,GAAlC,eAAAkB,EAAA,6DACUqC,EAASC,MAAMC,KAAKvB,EAAclC,IAD5C,SAGkB0D,QAAQC,IAAIJ,EAAON,IAAIR,IAHzC,uCAISmB,OACAC,QAAO,SAAAlC,GAAI,OAAImC,YAAiBnC,EAAM3B,MACtC6D,QAAO,SAAAlC,GAAI,OAAKoC,YAAUpC,OANnC,4C,sBCnCAqC,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CACE1D,QAAS,IAAIgB,EAAe2C,OAGhCC,SAASC,eAAe,W","file":"static/js/main.991c9460.chunk.js","sourcesContent":["export default class Range {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}","import React, { useState } from 'react';\nimport * as locales from 'react-date-range/dist/locale';\nimport { DateRange } from 'react-date-range';\nimport Range from '../domain/range';\n\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\n\nexport function DateRangePicker({ onChangeRange }) {\n  const [dateRange, setRange] = useState({\n    startDate: new Date(),\n    endDate: new Date(),\n    key: 'dateRange'\n  });\n  const handleChangeDateRange = ({ dateRange }) => {\n    const range = new Range(dateRange.startDate, dateRange.endDate);\n\n    setRange(dateRange);\n    onChangeRange(range);\n  };\n\n  return (\n    <DateRange\n      locale={locales['ko']}\n      editableDateInputs={true}\n      onChange={item => handleChangeDateRange(item)}\n      ranges={[dateRange]}\n      dateDisplayFormat={'yyyy/MM/dd'} \n    />\n  );\n}\n","import React from 'react';\n\nexport function CountResult({ count }) {\n  return (\n    <p data-testid='result'>{count} 일</p>\n  );\n}\n","import React, { useState } from 'react';\nimport { DateRangePicker } from './components/DateRangePicker';\nimport { CountResult } from './components/CountResult';\n\nfunction App({ counter }) {\n  const [count, setCount] = useState(0);\n  const handleChangeRange = (range) => {\n    counter.countWeekdayInRange(range).then(setCount);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>날짜 수 세기</h1>\n      <DateRangePicker \n        onChangeRange={handleChangeRange}\n      />\n      <CountResult\n        count={count}\n      />\n    </div>\n  );\n}\n\nexport default App;","import { differenceInBusinessDays, addDays } from 'date-fns';\n\nfunction countAllNonWeekendIn(range) {\n    const {start, end} = range;\n    const nextEndDate = addDays(end, 1);\n    \n    return differenceInBusinessDays(nextEndDate, start);\n}\n\nasync function countWeekdayInRange(dataSource, range) {\n    const nonWeekendCount = countAllNonWeekendIn(range);\n    const holidaysInRange = await dataSource.getHolidaysInRange(range);\n    const holidaysCount = holidaysInRange.length;\n\n    return nonWeekendCount - holidaysCount;\n}\n\nexport default class WeekdayCounter {\n    constructor(holidayDataSource) {\n        this.holidayDataSource = holidayDataSource;\n    }\n\n    countWeekdayInRange(range) {\n        return countWeekdayInRange(this.holidayDataSource, range);\n    }\n}","export default class Month {\n    constructor(date) {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n\n        this.year = year.toString();\n        this.month = month.toString().padStart(2, '0');\n    }\n\n    toString() {\n        return this.year + this.month;\n    }\n}","import axios from 'axios';\nimport { isBefore } from 'date-fns';\nimport addMonths from 'date-fns/addMonths';\nimport isWeekend from 'date-fns/isWeekend';\nimport isWithinInterval from 'date-fns/isWithinInterval';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport Month from './month';\n\nfunction readDate(dateString) {\n    const year = parseInt(dateString.substr(0, 4));\n    const month = parseInt(dateString.substr(4, 2));\n    const day = parseInt(dateString.substr(6, 2));\n    \n    return new Date(year, month - 1, day);\n}\n\nconst cache = {};\n\nasync function getHolidaysInMonth({ year, month }) {\n    const apiUrl = `https://shielded-forest-67184.herokuapp.com/holidays?year=${year}&month=${month}`;\n\n    if (cache[apiUrl] === undefined) {\n        const { data: { dates } } = await axios.get(apiUrl);\n        const holidays = dates.map(readDate);\n        \n        cache[apiUrl] = holidays;\n    }\n    return cache[apiUrl];\n}\n\nfunction* monthsInRange(range) {\n    const {start, end} = range;\n    const endMonth = startOfMonth(addMonths(end, 1));\n    let currentMonth = startOfMonth(start);\n\n    while(isBefore(currentMonth, endMonth)) {\n        yield new Month(currentMonth);\n        currentMonth = addMonths(currentMonth, 1);\n    }\n}\n\nasync function getHolidaysInRange(range) {\n    const months = Array.from(monthsInRange(range));\n    \n    return (await Promise.all(months.map(getHolidaysInMonth)))\n        .flat()\n        .filter(date => isWithinInterval(date, range))\n        .filter(date => !isWeekend(date));\n}\n\nexport {\n    getHolidaysInRange\n}","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\nimport WeekdayCounter from './domain/weekdayCounter';\nimport * as HerokuHolidayDataSource from './dataSource/herokuHolidayDataSource';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App \n        counter={new WeekdayCounter(HerokuHolidayDataSource)}\n      />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}