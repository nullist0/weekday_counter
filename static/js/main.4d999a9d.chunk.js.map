{"version":3,"sources":["domain/range.js","components/DateRangePicker.js","components/CountResult.js","App.js","domain/weekday_counter.js","api/holiday.js","api/holiday_api_request.js","api/heroku_holiday_api.js","index.js"],"names":["Range","start","end","this","DateRangePicker","onChangeRange","useState","startDate","Date","endDate","key","dateRange","setRange","locale","locales","editableDateInputs","onChange","item","range","handleChangeDateRange","ranges","dateDisplayFormat","CountResult","count","data-testid","App","counter","setCount","className","countWeekdayInRange","then","WeekdayCounter","holidayDataSource","a","getHolidaysInRange","holidays","days","eachDayOfInterval","weekdays","filter","date","isWeekend","every","holiday","getTime","length","Holiday","year","month","day","HolidayAPIRequest","getFullYear","toString","getMonth","padStart","HerokuHolidayAPI","_cache","holidayAPIRequest","cache","requestID","apiUrl","undefined","axios","get","data","map","months","eachMonthOfInterval","holidayAPIRequests","Promise","all","request","_getHolidaysInMonth","holidayAPIResponses","flat","toDate","isWithinInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d999a9d.chunk.js","sourcesContent":["class Range {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}\n\nexport default Range;","import React, { useState } from 'react';\nimport * as locales from 'react-date-range/dist/locale';\nimport { DateRange } from 'react-date-range';\nimport Range from '../domain/range';\n\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\n\nexport function DateRangePicker({ onChangeRange }) {\n  const [dateRange, setRange] = useState({\n    startDate: new Date(),\n    endDate: new Date(),\n    key: 'dateRange'\n  });\n  const handleChangeDateRange = ({ dateRange }) => {\n    const range = new Range(dateRange.startDate, dateRange.endDate);\n\n    setRange(dateRange);\n    onChangeRange(range);\n  };\n\n  return (\n    <DateRange\n      locale={locales['ko']}\n      editableDateInputs={true}\n      onChange={item => handleChangeDateRange(item)}\n      ranges={[dateRange]}\n      dateDisplayFormat={'yyyy/MM/dd'} \n    />\n  );\n}\n","import React from 'react';\n\nexport function CountResult({ count }) {\n  return (\n    <p data-testid='result'>{count} 일</p>\n  );\n}\n","import React, { useState } from 'react';\nimport { DateRangePicker } from './components/DateRangePicker';\nimport { CountResult } from './components/CountResult';\n\nfunction App({ counter }) {\n  const [count, setCount] = useState(0);\n  const handleChangeRange = (range) => {\n    counter.countWeekdayInRange(range).then(setCount);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>날짜 수 세기</h1>\n      <DateRangePicker \n        onChangeRange={handleChangeRange}\n      />\n      <CountResult\n        count={count}\n      />\n    </div>\n  );\n}\n\nexport default App;","import { eachDayOfInterval, isWeekend } from 'date-fns';\n\nclass WeekdayCounter {\n    constructor(holidayDataSource) {\n        this.holidayDataSource = holidayDataSource;\n    }\n\n    async countWeekdayInRange(range) {\n        const { start, end } = range;\n        const holidays = await this.holidayDataSource.getHolidaysInRange(range);\n        const days = eachDayOfInterval({ start, end });\n        const weekdays = days.filter(date => !isWeekend(date) && holidays.every(holiday => holiday.getTime() !== date.getTime()));\n        return weekdays.length;\n    }\n}\n\nexport default WeekdayCounter;","class Holiday {\n    constructor(year, month, day) {\n        this.year = year;\n        this.month = month;\n        this.day = day;\n    }\n\n    toDate() {\n        return new Date(this.year, this.month - 1, this.day);\n    }\n}\n\nexport default Holiday;","class HolidayAPIRequest {\n    constructor(date) {\n        this.year = date.getFullYear().toString();\n        this.month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n    }\n\n    requestID() {\n        return this.year + this.month;\n    }\n}\n\nexport default HolidayAPIRequest;","import axios from 'axios';\nimport { eachMonthOfInterval } from 'date-fns';\nimport isWithinInterval from 'date-fns/isWithinInterval';\nimport Holiday from './holiday';\nimport HolidayAPIRequest from './holiday_api_request';\n\nclass HerokuHolidayAPI {\n    constructor() {\n        this._cache = {};\n    }\n\n    async _getHolidaysInMonth(holidayAPIRequest, cache) {\n        const { year, month } = holidayAPIRequest;\n        const requestID = holidayAPIRequest.requestID();\n        const apiUrl = `https://shielded-forest-67184.herokuapp.com/holidays/${year}/${month}`;\n\n        if (cache[requestID] === undefined) {\n            const { data: { holidays } } = await axios.get(apiUrl);\n            cache[requestID] = holidays.map(({ year, month, day }) => new Holiday(year, month, day));\n        }\n        return cache[requestID];\n    }\n\n    async getHolidaysInRange(range) {\n        const { start, end } = range;\n        const months = eachMonthOfInterval({ start, end });\n        const holidayAPIRequests = months.map(month => new HolidayAPIRequest(month));\n        const holidayAPIResponses = await Promise.all(holidayAPIRequests.map(request => this._getHolidaysInMonth(request, this._cache)));\n        const holidays = holidayAPIResponses.flat();\n        \n        return holidays\n            .map(holiday => holiday.toDate())\n            .filter(date => isWithinInterval(date, { start, end }));\n    }\n}\n\nexport default HerokuHolidayAPI;","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\nimport WeekdayCounter from './domain/weekday_counter';\nimport HerokuHolidayAPI from './api/heroku_holiday_api';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App \n        counter={new WeekdayCounter(new HerokuHolidayAPI())}\n      />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}