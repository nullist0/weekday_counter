{"version":3,"sources":["domain/range.js","App.js","domain/weekdayCounter.js","dataSource/herokuHolidayDataSource.js","index.js"],"names":["Range","start","end","this","CountResult","counter","range","useState","count","setCount","useEffect","a","countWeekdayInRange","cache","handleRange","data-testid","App","props","state","startDate","Date","endDate","key","toRange","update","setState","className","locale","locales","editableDateInputs","onChange","item","moveRangeOnFirstSelection","ranges","dateDisplayFormat","React","Component","monthsInRange","endMonth","startOfMonth","addMonths","currentMonth","isBefore","countAllNonWeekendIn","nextEndDate","addDays","differenceInBusinessDays","countWeekdayHolidaysIn","dataSource","months","Array","from","Promise","all","map","getHolidaysIn","holidaysInRange","flat","filter","date","isWithinInterval","isWeekend","length","nonWeekendCount","holidaysCount","WeekdayCounter","holidayDataSource","readDate","dateString","year","parseInt","substr","month","day","params","format","apiUrl","axios","get","dates","data","ReactDOM","render","StrictMode","HerokuHolidayDataSource","document","getElementById"],"mappings":"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","file":"static/js/main.61afcd9c.chunk.js","sourcesContent":["export default class Range {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}","import React, { useEffect, useState } from 'react';\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\nimport * as locales from 'react-date-range/dist/locale';\nimport { DateRange } from 'react-date-range';\nimport Range from './domain/range';\n\nfunction CountResult({ counter, range }) {\n  const [count, setCount] = useState(0);\n  \n  useEffect(() => {\n    const handleRange = async () => {\n      const cache = await counter.countWeekdayInRange(range);\n      setCount(cache);\n    };\n    handleRange();\n  }, [counter, range]);\n  \n  return (\n    <p data-testid='result'>{count} 일</p>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = props.counter;\n  }\n\n  state = {\n    startDate: new Date(),\n    endDate: new Date(),\n    key: 'range'\n  }\n\n  toRange = (state) => {\n    const { startDate, endDate } = state;\n\n    return new Range(startDate, endDate);\n  }\n\n  update = ({ range }) => {\n    this.setState(range);\n  }\n\n  render() {\n    const range = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>날짜 수 세기</h1>\n        <DateRange\n          locale={locales['ko']}\n          editableDateInputs={true}\n          onChange={item => this.update(item)}\n          moveRangeOnFirstSelection={false}\n          ranges={[range]}\n          dateDisplayFormat={'yyyy/MM/dd'}\n        />\n        <CountResult\n          counter={this.counter}\n          range={this.toRange(range)} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","import { differenceInBusinessDays, addDays, isWithinInterval, startOfMonth, addMonths, isBefore, isWeekend } from 'date-fns';\n\nfunction* monthsInRange(range) {\n    const {start, end} = range;\n    const endMonth = startOfMonth(addMonths(end, 1));\n\n    let currentMonth = startOfMonth(start);\n\n    while(isBefore(currentMonth, endMonth)) {\n        yield currentMonth;\n        currentMonth = addMonths(currentMonth, 1);\n    }\n}\n\nfunction countAllNonWeekendIn(range) {\n    const {start, end} = range;\n    const nextEndDate = addDays(end, 1);\n    \n    return differenceInBusinessDays(nextEndDate, start);\n}\n\nasync function countWeekdayHolidaysIn(dataSource, range) {\n    const months = Array.from(monthsInRange(range));\n    const holidaysInRange = (await Promise.all(months.map(dataSource.getHolidaysIn)))\n        .flat()\n        .filter(date => isWithinInterval(date, range))\n        .filter(date => !isWeekend(date));\n    \n    return holidaysInRange.length;\n}\n\nasync function countWeekdayInRange(dataSource, range) {\n    const nonWeekendCount = countAllNonWeekendIn(range);\n    const holidaysCount = await countWeekdayHolidaysIn(dataSource, range);\n\n    return nonWeekendCount - holidaysCount;\n}\n\nexport default class WeekdayCounter {\n    constructor(holidayDataSource) {\n        this.holidayDataSource = holidayDataSource;\n    }\n\n    countWeekdayInRange(range) {\n        return countWeekdayInRange(this.holidayDataSource, range);\n    }\n}","import axios from 'axios';\nimport { format } from 'date-fns';\n\nfunction readDate(dateString) {\n    const year = parseInt(dateString.substr(0, 4));\n    const month = parseInt(dateString.substr(4, 2));\n    const day = parseInt(dateString.substr(6, 2));\n    \n    return new Date(year, month - 1, day);\n}\n\nasync function getHolidaysIn(month) {\n    const params = {\n        year: format(month, 'yyyy'),\n        month: format(month, 'MM')\n    };\n    const apiUrl = `https://shielded-forest-67184.herokuapp.com/holidays?year=${params.year}&month=${params.month}`;\n    const { data: { dates } } = await axios.get(apiUrl);\n    \n    return dates.map(readDate);\n}\n\nexport {\n    getHolidaysIn\n}","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\nimport WeekdayCounter from './domain/weekdayCounter';\nimport * as HerokuHolidayDataSource from './dataSource/herokuHolidayDataSource';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App \n        counter={new WeekdayCounter(HerokuHolidayDataSource)}\n      />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}